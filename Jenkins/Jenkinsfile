import hudson.model.*
import jenkins.model.CauseOfInterruption.UserInterruption

def masterBranch = 'aamir-test'
def mypod = "java-build-${UUID.randomUUID().toString()}"

@NonCPS
def disableRestartStage() {
    restartedFromStage = currentBuild.getBuildCauses().any { cause ->
        cause._class == 'org.jenkinsci.plugins.pipeline.modeldefinition.causes.RestartDeclarativePipelineCause'
    }
    if (restartedFromStage) {
        error 'Restarting build from a stage is disabled. Please rerun build from start.'
        currentBuild.result = 'ABORTED'
        return false
    }
    else {
        return true
    }
}

pipeline{
    agent{
        kubernetes {
            label mypod
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    name: mypod
spec:
  dnsConfig:
    options:
      - name: ndots
        value: "2"
  nodeSelector:
    beta.kubernetes.io/os: linux
    beta.kubernetes.io/arch: amd64
  containers:
  - name: git
    image: alpine/git:v2.26.2
    imagePullPolicy: IfNotPresent
    tty: true
    command:
    - cat
  - name: maven
    image: maven:3.6.3-adoptopenjdk-8
    imagePullPolicy: IfNotPresent
    tty: true
    command:
    - cat
"""
        }
    }
    options {
        skipDefaultCheckout()
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
    }
    stages {
        stage("PR Config") {
            when {
                changeRequest target: masterBranch
            }
            steps {
                container('git') {
                    script {
                        disableRestartStage()
                    }
                    checkout([$class: 'GitSCM',
                              branches: [[name: "${env.CHANGE_BRANCH}"]],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [[$class: 'CheckoutOption', timeout: 30],
                                           [$class: 'RelativeTargetDirectory',
                                            relativeTargetDir: "${env.WORKSPACE}"],
                                           [$class: 'PreBuildMerge',
                                            options: [ 	fastForwardMode: "NO_FF",
                                                          mergeRemote: 'origin',
                                                          mergeTarget: "${env.CHANGE_TARGET}"]],
                                           [$class: 'CloneOption', depth: 300, noTags: true, reference: '', shallow: true],
                                           [$class: 'UserIdentity',
                                            email: 'aamir@hotmail.com',
                                            name: 'Build']],
                              submoduleCfg: [],
                              userRemoteConfigs: [[url: 'https://github.com/Aamir010/spring-boot-rest-example.git']]])
                }
            }
        }
        stage('Master Config') {
            when {
                branch masterBranch
            }
            steps {
                container('git') {
                    script {
                        disableRestartStage()
                    }
                    checkout([$class: 'GitSCM',
                              branches: [[name: "${env.BRANCH_NAME}"]],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [[$class: 'CheckoutOption', timeout: 30],
                                           [$class: 'RelativeTargetDirectory',
                                            relativeTargetDir: "${env.WORKSPACE}"],
                                           [$class: 'CloneOption', depth: 300, noTags: true, reference: '', shallow: true],
                                           [$class: 'UserIdentity',
                                            email: 'aamir@hotmail.com',
                                            name: 'Build']],
                              submoduleCfg: [],
                              userRemoteConfigs: [[url: 'https://github.com/Aamir010/spring-boot-rest-example.git']]])
                }
            }
        }
        stage("Build") {
            steps {
                container('maven') {
                    script {
                        disableRestartStage()
                    }
                    sh "mvn install -DskipTests"
                }
            }
        }
        stage("Test") {
            steps {
                container('maven') {
                    script {
                        disableRestartStage()
                    }
                    sh "mvn clean package"
                }
            }
        }
    }
}